= Search =

Demonstrates a customized title bar and creating a simple search functionality with !JavaScript.

== Design ==

The Search example has a customized title bar with text field, exit button and a search button. The title bar has been implemented so, that it appears with a nice slide-in animation. Otherwise the mini application has fairly simple content, just a list of items that can be filtered with search keywords.

==== Search help text: ====
Search shows how to find an item within a given list. Search is opened by tapping the search icon. The search bar is brought up and it is now possible to fill in a search string. In this example, try e.g. “1” to get a fair amount of results. After closing the keypad, it is necessary to tap the search icon again. Pressing the blue handle hides the search bar. People can return to the main view by pressing the title bar.

[[Image(search.png)]]

== Implementation ==

=== Structure ===
The structure of the Search mini app here has been divided into two pieces. The title bar is presented separately from the Search mini app structure & logic.

The example code snippet below shows how the title bar has been structured:

{{{
<table class="header_table" cellpadding="0" cellspacing="0" summary="Default Header Table">
  <tr>

    <td height="40">
      <div class="title_slider">
        <table id="search_title" class="title_slider_section show_title_main">
          <tr>
            <td><div id="title" class="title_slider_section">MiniApps</div></td>
            <td>
              <img src="img/close_button.png" height="16" width="16" alt="Home"
              onclick="
                mwl.switchClass('#search_title', 'show_title_search', 'show_title_main');
                mwl.setGroupTarget('#navigateToggle', '#home', 'show', 'hide');
                mwl.switchClass('#slider', 'show_miniapp', 'show_main');
                mwl.scrollTo('#main');"/>
            </td>
            <td>
              <div class="search_text_entry">
                <input id="search_input" type="text" name="search_params" />
              </div>
            </td>
          </tr>
        </table>
      </div>
    </td>
	  
    <td width="40" height="40">
        <div id="search_button" class="hide">
          <img src="img/top_search.png" height="40" width="43" alt="Search" 
            onclick="
              mwl.switchClass('#search_title', 'show_title_main', 'show_title_search');
              createSearchList();"/>
        </div>
      </div>
    </td>
	  
  </tr>
</table>
}}}

The actual content for the Search mini app is dynamically created with !JavaScript (described under the Logic section). The index.html merely holds a container for the Search content:

{{{
<!--Search mini app-->
<div id="search" class="slider_section hide">
<!-- NOTE: The Search content is being loaded
  from within the utils.js's createSearchList() method! -->
</div>
<!--End Search mini app-->
}}}

=== Logic ===
The Search mini app's !JavaScript code, that generates the HTML response by checking the user's search keyword input and filtering the unmatching items out.

NOTE: All !JavaScript code (except the MWL code) is being executed on the intermediate server (or the Proxy Server) and require network transaction! This will considerably slow down the UI flow!
{{{
#!js
/**
 * Function for generating HTML structure for the Search mini app.
 * 
 *   Checks the search input field's value, and compares it against
 *   the currently known items (i.e. the ones generated with the
 *   _generateSearchItems() function). 
 */
function createSearchList() {
	var allItems = _generateSearchItems();
	var shownItems = [];
	
	// Fetch the user's input.
	var searchTerm = document.getElementById("search_input").value;
	console.log("search_input was: " + searchTerm);
	
	if (searchTerm) {
		for (var i = 0; i < allItems.length; i++) {
			var item = allItems[i];
			if (item.indexOf(searchTerm) != -1) {
				shownItems.push(item);
			}
		}
	} else {
		shownItems = allItems;
	}

	var outputstr = '<div id="tree_page_content" class="show">';
	for ( var i = 0; i < shownItems.length; i++) {
		outputstr += '<div class="text_list_item" onclick="">'
			  + shownItems[i] + '</div>';
	}
	outputstr += '</div>';

	var searchContainer = document.getElementById("search");
	searchContainer.innerHTML = outputstr;
}

/**
 * A helper function for generating a set of dummy items.
 */
function _generateSearchItems() {
	var searchItems = [];
	var ItemCount = 15;
	// Generate the items.
	for ( var i = 0; i < ItemCount; i++) {
		searchItems.push("Item " + (i+1));
	}
	
	return searchItems;
}
}}}

[[BR]]
=== Style and transitions ===

Some general CSS classes related to defining the Search mini application's look and feel:

Title bar style classes:
{{{
.header_table {
	height: 40px;
	width: 100%;
}

.show_title_main {
	margin-left: 0px;
}

.show_title_search {
	margin-left: -197px;
}

.title_slider_section {
	width: 197px;
	-webkit-transition: margin-left 0.5s linear;
}

.search_text_entry {
	width: 90%;
	padding-left: 3px;
	padding-right: 3px;
	vertical-align: middle;
}

#search_input {
	width: 100%;
}
}}}

CSS class definitions for the Search miniapp content:
{{{
.text_list_item { 
	background-color: #fff;
	padding: 11px 8px 11px 8px;
	font-weight: bold;
	border-bottom: 1px #e7e7e7 solid;
	font-size: 16px;
}
}}}