= File Download =

Demonstrates selecting a file and sending it using HTML forms.

== Design ==

The File Download example demonstrates downloading an image file over the network.

The example has few simple views, one for starting the file download flow, another for selecting the file from pre-defined set of images, and a third one for starting a download itself.

For more information on File download design, see the
[http://www.developer.nokia.com/Resources/Library/Series_40_web_apps_library/#!design-library-intoduction/file-upload-and-download.html Series 40 web apps design library].

==== File Download help text: ====
File download requires people to select a file to be downloaded – in this case from a small gallery. After that, people move to the download view with a thumbnail of the image to be loaded, and they can confirm the download process. Downloading is done by the browser, and downloads can be found from the browser. After download completion, the application returns to the first page.

[[Image(file_download_select.png)]] [[Image(file_download_start.png)]]

== Implementation ==

=== Structure ===
The example code snippet below defines the whole File Download example mini app's structure. The downloadable image thumbnails are included within the web app, where the downloadable images themselves are provided from these wiki pages.

Please note, that the horizontal aligning of the elements is usually done with tables in S40 Web Apps, as the CSS "float" style formatting isn't supported.

{{{
<!--FileDownload mini app-->
<div id="fileDownload" class="slider_section hide">

  <!-- FileDown Control Content -->
  <div id="fileDownload_content">

    <!-- Base view -->
    <div id="fileDownload_base_view" class="show">
      <div class="list_section_header">File download - base view</div>
      <div class="fillWidth">
        <input type="button" name="start_download_btn" class="button centered_button" value="Start download flow"
        onclick="
          mwl.setGroupTarget('#fileDownload_content', '#fileDownload_select_view', 'show', 'hide');
        " />
      </div>
    </div>

    <!-- Select & Download view -->
    <div id="fileDownload_select_view" class="hide">
      <div class="list_section_header">File download - file select</div>
      <div class="fillWidth image_grid">
        <span onclick="
          mwl.setGroupTarget('#fileDownload_content', '#fileDownload_details_view', 'show', 'hide');
          setImageDetails('img1.jpg');
        ">
          <img class="download_images" src="img/img1.jpg" alt="Mountain lake" />
        </span>
        <span onclick="
          mwl.setGroupTarget('#fileDownload_content', '#fileDownload_details_view', 'show', 'hide');
          setImageDetails('img2.jpg');
        ">
          <img class="download_images" src="img/img2.jpg" alt="Desert" />
        </span>
        <span onclick="
          mwl.setGroupTarget('#fileDownload_content', '#fileDownload_details_view', 'show', 'hide');
          setImageDetails('img3.jpg');
        ">
          <img class="download_images" src="img/img3.jpg" alt="Sunset church" />
        </span>
        <span onclick="
          mwl.setGroupTarget('#fileDownload_content', '#fileDownload_details_view', 'show', 'hide');
          setImageDetails('img4.jpg');
        ">
          <img class="download_images" src="img/img4.jpg" alt="Crocodile lake" />
        </span>
      </div>
    </div>
    
    <!-- Image details view -->
    <div id="fileDownload_details_view" class="hide">
      <div class="list_section_header">File download - Image details</div>
      <div class="big_image_wrapper">
        <img id="download_image" alt="Image to download" />
      </div>
      <div id="download_image_name" class="text_block">Placeholder.jpg</div>
      <input id="download_button" type="submit" value="DOWNLOAD" class="button upload_download_button" />
    </div>

  </div>
</div>
<!--End FileUpload mini app-->
}}}

=== Logic ===
A piece of !JavaScript code, that helps in creating the image details view based on user selection.

NOTE: All !JavaScript code (except the MWL code) is being executed on the intermediate server (or the Proxy Server) and require network transaction! This will considerably slow down the UI flow!
{{{
function setImageDetails(fileName) {
  var _baseURL = "http://projects.developer.nokia.com/webappsuivisualisation/raw-attachment/wiki/WikiStart/";
  var imgDownloadUrl = _baseURL + "" + fileName;
  
  document.getElementById("download_image_name").innerHTML = fileName;
  document.getElementById("download_image").src = "img/" + fileName;
  var dlBtn = document.getElementById("download_button");
  dlBtn.setAttribute('onclick', 
      "mwl.setGroupTarget('#fileDownload_content', '#fileDownload_base_view', 'show', 'hide');" +
      "mwl.loadURL('" + imgDownloadUrl + "');");
}
}}}

[[BR]]
=== Style and transitions ===

Some general CSS classes related to defining the File Download mini application's look and feel:
{{{
.button {
	height: 40px;
	background-image: url('../img/button_background.png');
	color: #fff;
}

.centered_button {
	width: 80%;
	margin-left: 10%;
	margin-top: 10%
}

.image_grid {
	margin-top: 10%;
	margin-left: 5%;
}

.text_block {
	padding: 8px;
}
}}}