= Tree Structure =

Tree Structure example demonstrates how to create tree like navigation dynamically with !JavaScript.

== Design ==

The Tree Structure example demonstrates a list with selectable items, that take the user one level 'deeper' within the tree structure. The list header item always shows, where the user is currently while navigating the tree.

For more information on Tree Structure, please see the 
[http://www.developer.nokia.com/Resources/Library/Series_40_web_apps_library/#!design-library-intoduction/application-flow-models.html Series 40 web apps design library].

==== Tree Structure help text: ====
Tree structure is a simple drill-down structure with 3 hierarchy levels. Back brings people to the previous view. The drill-down path is shown as a breadcrumb in the content header.

[[Image(tree_structure.png)]] [[Image(tree_structure_content.png)]]

== Implementation ==

=== Structure ===
The Tree Structure mini app's HTML structure is really simple; it's just a top level container that get's its contents dynamically from the intermediate proxy server. The real structure is defined from within the logic written in !JavaScript.

{{{
<!--TreeStructure mini app-->
<div id="treeStructure" class="slider_section hide">
	<!-- NOTE: The tree view content is being loaded
	from within the utils.js's generateTreeView() method! -->
</div>
<!--End TreeStructure mini app-->
}}}

=== Logic ===
The !JavaScript function generateTreeView() handles generating the tree view HTML structure to the given elementId. It generates function calls to itself to tree's list element onclick handlers, so in a way the function is used recursively.

NOTE: If this example would have to be implemented without creating the content dynamically, the whole tree structure should be defined in the HTML. If each of the lists have 4 items, this would mean 4 * 4 = 16 different views with 2 levels deep tree structure. Also, the transitions between the different pages would have to be done purely with MWL functions.

{{{
#!js
/**
 * Function for generating HTML structure for the tree view mini app.
 * 
 *   elementId - HTML element id to which the output is appended.
 *   pageLevel - The current depth of the tree
 *   index1 - The item index selected from the tree's first level.
 *   index2 - The item index selected from the tree's second level.
 */
function generateTreeView(elementId, pagelevel, index1, index2) {
	var pageNames = ["A", "B", "C", "D"];
	var pageCount = pageNames.length;
	
	var treeStructureContainer = document.getElementById(elementId);
	treeStructureContainer.innerHTML = "";
	
	var headerstr = '<div class="list_section_header">Tree ';
	var outputstr = '<div id="tree_page_content" class="show">';
	
	if (pagelevel === 0) {
		for (var i = 0; i < pageCount ; i++) {
			outputstr += '<div class="text_list_item"'
					  + 'onclick="generateTreeView(\'' + elementId + '\',1,' + i + ',' + '0' + ')">'
					  + 'Item ' + (i+1) + '</div>';
		}
		mwl.setGroupTarget('#navigateToggle', '#miniappGoHomeToggle', 'show', 'hide');
	} else if (pagelevel === 1) {
		headerstr += '> Item ' + (index1+1);
		for (var i = 0; i < pageCount ; i++) {
			outputstr += '<div class="text_list_item"'
					  + 'onclick="generateTreeView(\'' + elementId + '\',2,' + index1 + ',' + i + ')">'
					  + 'Item ' + pageNames[i] + '</div>';
		}
		setBackButton(elementId, pagelevel, index1);
	} else if (pagelevel === 2) {
		headerstr += '> Item ' + (index1+1) + ' > ' + pageNames[index2];
		outputstr += '<div class="text_block">'
				  + 'Content item ' + (index1+1)
				  + ' - ' + pageNames[index2] + '</div>';
		setBackButton(elementId, pagelevel, index1);
	} else {
		// Handle error here.
	}
	// Close the header string
	headerstr += '</div>';
	
	treeStructureContainer.innerHTML += headerstr;
	treeStructureContainer.innerHTML += outputstr;
}
}}}

The helper method used in the generateTreeView. Simply sets a correct kind of click handler to the Back button and shows it.
{{{
#!js
/**
 * Helper function for setting back button behaviour.
 */
function setBackButton(elementId, pagelevel, index1) {
	var treeBackButton = document.getElementById("tree_backButton");
	treeBackButton.onclick = function() {
		generateTreeView(elementId, pagelevel - 1, index1, 0); 
	};
	mwl.setGroupTarget('#navigateToggle', '#tree_backButton', 'show', 'hide');
}
}}}

=== Style and transitions ===
The CSS classes used in the Tree Structure mini app are pretty much the same ones as in e.g. the Lists example.

{{{
.list_section_header {
	background-color: #ced3c6;
	color: white;
	height: 20px;
	padding-left: 12px;
	font-size: 14px;
	font-weight: bold;
	line-height: 20px;
}

.text_list_item { 
	background-color: #fff;
	padding: 11px 8px 11px 8px;
	font-weight: bold;
	border-bottom: 1px #e7e7e7 solid;
	font-size: 16px;
}

.text_block {
	padding: 8px;
}
}}}