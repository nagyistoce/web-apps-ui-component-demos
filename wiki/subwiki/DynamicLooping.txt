= Dynamic Looping =

Demonstrates using !JavaScript in Web Apps.

== Design ==

The Dynamic Looping example implements the classic rock - paper - scissors game and demonstrates using the !JavaScript in handling user input and showing content based on it.

The Dynamic Looping starts by presenting the user options to choose his weapon (i.e. !Rock/Paper/Scissors) and after the selection a piece of !JavaScript code is executed on the intermediate server (see the S40 Web Apps [http://www.developer.nokia.com/Resources/Library/Series_40_web_apps_library/#!technical-library/overview.html Architecture and behaviour overview]) to figure out the computer's response.

For more information on Webkit transitions and supported CSS 3 features, please see the 
[http://www.developer.nokia.com/Resources/Library/Series_40_web_apps_library/#!technical-library/css-properties-and-values-supported.html Series 40 web apps design library].

==== Dynamic Looping help text: ====
Dynamic looping is demonstrated with the rock-paper-scissors game. Since the game logic requires a server, the application connects to the server automatically after people have selected one of the three choices. The app shows the server’s choice and the player’s choice. Since the previous results are not saved, back-stepping is not meaningful, as it would initiate a new server call every time. Therefore, people can just move forward to a new game or leave the example and return to the main menu.

[[Image(dynamic_looping_1.png)]] [[Image(dynamic_looping_2.png)]]

== Implementation ==

=== Structure ===
The example code snippet below defines the Dynamic Looping example mini app's structure.

Please note, that the horizontal aligning of the elements is usually done with tables in S40 Web Apps, as the CSS "float" style formatting isn't supported.

{{{
<!--DynamicLooping mini app-->
<div id="dynamicLooping" class="slider_section hide">
  <div class="list_section_header">Dynamic looping</div>
  <div id="dynamicLooping_content">

    <!-- Game instructions & Rock / Paper / Scissors buttons -->
    <div id="dynLoop_content_1" class="show">
      <div class="text_block">Press one button.</div>
      <table class="fill" cellpadding="0" cellspacing="0">
        <tr>
          <td class="alignR">
            <input type="button" name="rock_button" class="button button_3_in_row_width" value="Rock"
              onclick="
                mwl.setGroupTarget('#dynamicLooping_content', '#dynLoop_content_2', 'show', 'hide');
                rockPaperScissors(0);" />
          </td>
          <td class="alignC">
            <input type="button" name="paper_button" class="button button_3_in_row_width" value="Paper"
              onclick="
                mwl.setGroupTarget('#dynamicLooping_content', '#dynLoop_content_2', 'show', 'hide');
                rockPaperScissors(1);" />
          </td>
          <td class="alignL">
            <input type="button" name="scissors_button" class="button button_3_in_row_width" value="Scissors"
              onclick="
                mwl.setGroupTarget('#dynamicLooping_content', '#dynLoop_content_2', 'show', 'hide');
                rockPaperScissors(2);" />
          </td>
        </tr>
      </table>
    </div>

    <!-- 'Game Over' window, with information of the outcome and a next game button -->
    <div id="dynLoop_content_2" class="hide">

      <div class="checkable_list_item">
        <table class="fill" cellpadding="0" cellspacing="0">
          <tr>
            <td class="list_item_left_align">You chose</td>
            <td class="list_item_right_align">
              <img id="player_img" height="40" width="43" alt="My choice" />
            </td>
          </tr>
        </table>
      </div>
      <div class="checkable_list_item">
        <table class="fill" cellpadding="0" cellspacing="0">
          <tr>
            <td class="list_item_left_align">Computer chose</td>
            <td class="list_item_right_align">
              <img id="opponent_img" height="40" width="43" alt="Computers choice" />
            </td>
          </tr>
        </table>
      </div>
      <div class="text_block">
        <table class="fill" cellpadding="0" cellspacing="0">
          <tr>
            <td id="game_over_txt" class="list_item_left_align"></td>
          </tr>
        </table>
      </div>
      <div class="fill">
        <input type="button" name="nextGameBtn" class="next_game_button" value="Next game"
         onclick="
          mwl.setGroupTarget('#dynamicLooping_content', '#dynLoop_content_1', 'show', 'hide');" />
      </div>
    </div>

  </div>
</div>
<!--End DynamicLooping mini app-->
}}}

=== Logic ===
A piece of !JavaScript code, that handles the game logic, i.e. checks the user input against randomly generated choice for the opponent. The !JavaScript logic adds few nodes to the DOM tree and an HTML response for the changed parts is being send back to the client for viewing in the browser.

NOTE: All !JavaScript code (except the MWL code) is being executed on the intermediate server (or the Proxy Server) and require network transaction! This will considerably slow down the UI flow!
{{{
/**
 * Rock, Paper, Scissors game algorithm.
 * 
 *   0 - Rock
 *   1 - Paper
 *   2 - Scissors
 */
function rockPaperScissors(playerChoice) {
  var winString;
  var choiceImages = ["img/rock.png", "img/paper.png", "img/scissors.png"];
  var computerChoice = Math.floor(Math.random()*3);

  if ( playerChoice == computerChoice ) {
    winString = "Tie.";
  }
  else if((computerChoice == 0 && playerChoice == 2) ||
      (computerChoice == 1 && playerChoice == 0) ||
      (computerChoice == 2 && playerChoice == 1)) {
    winString = "Computer wins.";
  }
  else {
    winString = "You win.";
  }

  document.getElementById("player_img").src = choiceImages[playerChoice];
  document.getElementById("opponent_img").src = choiceImages[computerChoice];
  document.getElementById("game_over_txt").innerHTML = winString;
}
}}}

[[BR]]
=== Style and transitions ===

Some general CSS classes related to defining the Dynamic Looping mini application's look and feel:
{{{
.button {
	height: 40px;
	background-image: url('../img/button_background.png');
	color: #fff;
}

.button_3_in_row_width {
	width: 60px;
}

.checkable_list_item {
	height: 40px;
	background-color: #fff;
	padding: 0px 8px 0px 8px;
	font-weight: bold;
	border-bottom: 1px #e7e7e7 solid;
	font-size: 16px;
}
}}}