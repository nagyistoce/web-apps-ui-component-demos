= Passwords =

The Passwords example app demonstrates saving credentials information with the platform's password manager.

== Design ==

The Passwords example is simply a page with two text input fields (name and password) and a Sign in button.

For more information on Passwords, please see the 
[http://www.developer.nokia.com/Resources/Library/Series_40_web_apps_library/#!design-library-intoduction/passwords.html Series 40 web apps design library].

==== Passwords help text: ====
Passwords show a standard login procedure. People can sign in for the first time and the application asks the user if it should automatically fill in the password next time. If the password is saved, but changed during a later login, the application asks to update the password. Help should always be shown in a Login/sign-in view to explain the relevant credentials and how to register for the service if necessary, and also how to retrieve a forgotten password.

[[Image(passwords_form.png)]] [[Image(passwords_dialog.png)]]

== Implementation ==

The example code snippet defines the entire Passwords mini app (as shown in the screenshot above). Basically, it consists out of two Text field items and a button. Saving of the password is done with !JavaScript.

Please note, that the horizontal aligning of the elements is usually done with tables in S40 Web Apps, as the CSS "float" style formatting isn't supported.

{{{
<!--Password mini app-->
<div id="passwords" class="slider_section hide">
  
  <!-- Passwords Control Content -->
  <div id="passwords_content">
    
    <!-- Password query view -->
    <div id="password_query_view" class="show">
      <div class="list_section_header">Try different password 2nd time</div>
      
      <form action="#">
        <div class="text_field_item">
          <div>Username</div>
          <div class="text_entry_with_label">
            <table class="fill" cellpadding="0" cellspacing="0" summary="Button Table">
              <tr>
                <td class="text_input_cell">
                <input type="text" id="name" /></td>
              </tr>
            </table>
          </div>
        </div>
        
        <div class="text_field_item">
          <div>Password</div>
          <div class="text_entry_with_label">
            <table class="fill" cellpadding="0" cellspacing="0" summary="Button Table">
              <tr>
                <td class="text_input_cell">
                <input type="password" id="password" /></td>
              </tr>
            </table>
          </div>
        </div>
        
        <input type="submit"
            class="button centered_button" value="Sign In"
            onclick="
              getUsernameAndPassword();
              mwl.setGroupTarget('#passwords_content', '#password_login_view', 'show', 'hide');
            " />
      </form>

      <div class="fill">
        <input type="button" id="help_button"
          class="button centered_button" value="Help"
          onclick="
            mwl.setGroupTarget('#passwords_content', '#password_help_view', 'show', 'hide');
          " />
      </div>
    </div>
    
    <!-- Password login in view -->
    <div id="password_login_view" class="hide">
      <div class="list_section_header">Try different password 2nd time</div>
      <div class="text_block">You are logged in.</div>
      <div class="text_block">Clear the password from main view.</div>
    </div>
    
    <div id="password_help_view" class="hide">
      <div class="list_section_header">Help</div>
      <div class="information_text_block">
        <b>Help - Passwords</b><br /><br />
        This pattern shows a standard login procedure.
        People can sign in for the first time and the application asks the user if it should automatically fill-in the password next time.
        If the password is saved, but changed during later login, the application asks to update the password.
        Help should always be shown in a Login/sign-in view to explain the relevant credential and how to register for the service if necessary or how to retrieve a forgotten password.
      </div>
    </div>
  </div>
</div>
<!--End Password mini app-->
}}}

=== Logic ===
Here's a simple !JavaScript function, that simply logs the given name and password combination to the console. The platform's password manager is being used for storing data persistently.

{{{
#!js
function getUsernameAndPassword(){
	var name = document.getElementById("name").value;
	var password = document.getElementById("password").value;
	
	console.log(name + " " + password);
}
}}}

=== Style ===
Some CSS class definitions used with the Passwords mini app:

{{{
.text_entry_with_label {
	height: 40px;
	background-color: #c6cbce;
	margin-top: 8px;
	padding-left: 8px;
}

.text_input_cell {
	width: 75%;
	height: 40px;
	vertical-align: middle;
	padding-right: 10px;
}

.text_block {
	padding: 8px;
}
}}}